/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/rgb.h>

#define HYPER LC(LS(LG(LALT)))

// layers

#define DEFAULT 0
#define LOWER 1
#define MAGIC 2
#define FACTORY_TEST 3

/ {
    behaviors {
        // For the "layer" key, it'd nice to be able to use it as either a shift or a toggle.
        // Configure it as a tap dance, so the first tap (or hold) is a &mo and the second tap is a &to

        layer_td: tap_dance_0 {
            compatible = "zmk,behavior-tap-dance";
            label = "LAYER_TAP_DANCE";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&mo 4>, <&to 4>;
        };

        magic: magic_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "MAGIC_HOLD_TAP";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            bindings = <&mo>, <&rgb_ug_status_macro>;
        };

        hm: hm {
            compatible = "zmk,behavior-hold-tap";
            label = "HM";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <300>;
            quick-tap-ms = <300>;
            require-prior-idle-ms = <300>;
            flavor = "tap-preferred";
        };
    };

    macros {
        rgb_ug_status_macro: rgb_ug_status_macro_0 {
            label = "RGB_UG_STATUS";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&rgb_ug RGB_STATUS>;
        };

        bt_0: bt_profile_macro_0 {
            label = "BT_0";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 0>;
        };

        bt_1: bt_profile_macro_1 {
            label = "BT_1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 1>;
        };

        bt_2: bt_profile_macro_2 {
            label = "BT_2";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 2>;
        };

        bt_3: bt_profile_macro_3 {
            label = "BT_3";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 3>;
        };
    };

    combos {
        compatible = "zmk,combos";

        goBack {
            bindings = <&kp LG(Z)>;
            key-positions = <47 48>;
            layers = <0 1>;
        };

        copy {
            bindings = <&kp LG(C)>;
            key-positions = <48 49>;
            layers = <0 1>;
        };

        paste {
            bindings = <&kp LG(V)>;
            key-positions = <49 50>;
            layers = <0 1>;
        };

        space {
            bindings = <&kp SPACE>;
            key-positions = <50 51>;
            layers = <0 1>;
        };

        Esc {
            bindings = <&kp ESCAPE>;
            key-positions = <36 37>;
            layers = <0 1>;
        };

        Tab {
            bindings = <&kp TAB>;
            key-positions = <37 38>;
            layers = <0 1>;
        };

        Exclamation {
            bindings = <&kp EXCLAMATION>;
            key-positions = <24 25>;
            layers = <0 1>;
        };

        At {
            bindings = <&kp AT_SIGN>;
            key-positions = <25 26>;
            layers = <0 1>;
        };

        Quote {
            bindings = <&kp DOUBLE_QUOTES>;
            key-positions = <29 30>;
            layers = <0 1>;
        };

        Cut {
            bindings = <&kp LG(X)>;
            key-positions = <48 50>;
            layers = <0 1>;
        };

        SingleQuote {
            bindings = <&kp SINGLE_QUOTE>;
            key-positions = <30 31>;
            layers = <0 1>;
        };

        Equal {
            bindings = <&kp EQUAL>;
            key-positions = <41 43>;
            layers = <0 1>;
        };

        Dash {
            bindings = <&kp MINUS>;
            key-positions = <41 42>;
            layers = <0 1>;
        };

        UnderScore {
            bindings = <&kp UNDERSCORE>;
            key-positions = <42 43>;
            layers = <0 1>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        Qwerty {
            // ---------------------------------------------------------------------------------------------------------------------------------
            // |  F1   |  F2 |  F3 |  F4  |  F5  |                                                               |  F6   |  F7   |  F8  |   F9  |  F10 |
            // |  =    |  1  |  2  |  3   |  4   |  5   |                                                 |  6   |   7   |   8   |  9   |   0   |   -  |
            // |  TAB  |  Q  |  W  |  E   |  R   |  T   |                                                 |  Y   |   U   |   I   |  O   |   P   |   \  |
            // |  ESC  |  A  |  S  |  D   |  F   |  G   |                                                 |  H   |   J   |   K   |  L   |   ;   |   '  |
            // |   `   |  Z  |  X  |  C   |  V   |  B   | LSHFT | LCTRL | LOWER | | LGUI  | RCTRL | RSHFT |  N   |   M   |   ,   |  .   |   /   | PGUP |
            // | MAGIC | HOME| END | LEFT | RIGHT|      | BSPC  | DEL   | LALT  | | RALT  | RET   | SPACE |      |  UP   | DOWN  |  [   |   ]   | PGDN |

            bindings = <
&kp F1      &kp F2        &kp F3          &kp F4            &kp F5                                                                                                                                  &kp F6                &kp F7                 &kp F8           &kp F9                &kp F10
&kp EQUAL   &kp N1        &kp N2          &kp N3            &kp N4             &kp N5                                                                                                       &kp N6  &kp N7                &kp N8                 &kp N9           &kp N0                &kp MINUS
&kp GRAVE   &kp Q         &kp W           &kp E             &kp R              &kp T                                                                                                        &kp Y   &kp U                 &kp I                  &kp O            &kp P                 &kp BSLH
&caps_word  &hm LSHIFT A  &hm LEFT_ALT S  &hm LEFT_GUI D    &lt 2 F            &hm LA(LC(LG(LSHFT))) G                                                                                      &kp H   &kp J                 &hm RIGHT_GUI K        &hm RIGHT_ALT L  &hm RSHIFT SEMICOLON  &kp SQT
&kp LSHIFT  &kp Z         &kp X           &kp C             &kp V              &kp B                    &kp LA(LC(LG(LSHFT)))  &kp LS(LCTRL)  &tog 1      &kp LGUI  &kp RCTRL  &kp RSHFT    &kp N   &kp M                 &kp COMMA              &kp DOT          &kp FSLH              &kp RIGHT_SHIFT
&magic 6 0  &kp HOME      &kp TILDE       &kp LEFT_BRACKET  &kp RIGHT_BRACKET                           &lt 3 BACKSPACE        &lt 2 ENTER    &kp DELETE  &kp RALT  &kp RET    &lt 5 SPACE          &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp LEFT_BRACE   &kp RIGHT_BRACE       &kp PG_DN
            >;
        };

        colemakDH {
            bindings = <
&kp F1      &kp F2        &kp F3      &kp F4          &kp F5                                                                                                                       &kp F6                &kp F7                 &kp F8      &kp F9           &kp F10
&kp EQUAL   &kp N1        &kp N2      &kp N3          &kp N4    &kp N5                                                                                                     &kp N6  &kp N7                &kp N8                 &kp N9      &kp N0           &kp BSLH
&kp GRAVE   &kp Q         &kp W       &kp F           &kp P     &kp B                                                                                                      &kp J   &kp L                 &kp U                  &kp Y       &kp SEMI         &kp MINUS
&caps_word  &hm LSHIFT A  &hm LALT R  &hm LEFT_GUI S  &lt 2 T   &hm LA(LC(LG(LSHIFT))) G                                                                                   &kp M   &kp N                 &hm RIGHT_GUI E        &hm RALT I  &hm RSHFT O      &kp SQT
&kp LSHFT   &kp Z         &kp X       &kp C           &kp D     &kp V                     &kp LG(LC(LA(LSHFT)))  &kp LS(LCTRL)  &tog 0   &kp LGUI  &kp RIGHT  &kp TAB      &kp K   &kp H                 &kp COMMA              &kp DOT     &kp FSLH         &kp RSHFT
&trans      &kp HOME      &kp TILDE   &kp LBKT        &kp RBKT                            &lt 3 BACKSPACE        &lt 2 ENTER    &kp DEL  &kp RET   &kp RET    &lt 5 SPACE          &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp LBRC    &kp RIGHT_BRACE  &trans
            >;
        };

        Numbers {
            bindings = <
&trans         &trans     &trans        &trans             &trans                                                                                            &trans        &trans         &trans        &trans         &trans
&trans         &kp MINUS  &kp D         &kp E              &kp F    &trans                                                                    &kp LS(CARET)  &kp LS(DLLR)  &kp LS(POUND)  &kp LS(AT)    &kp LS(EXCL)   &kp LS(PIPE)
&trans         &kp DOT    &kp N7        &kp N8             &kp N9   &kp RET                                                                   &kp LS(PRCNT)  &kp N7        &kp N8         &kp N9        &kp LS(COLON)  &kp K
&kp COMMA      &kp N4     &kp N4        &kp N5             &kp N6   &kp BSPC                                                                  &kp LS(PLUS)   &kp N4        &kp N5         &kp N6        &kp MINUS      &kp J
&kp LG(Z)      &kp N0     &kp N1        &kp N2             &kp N3   &kp SPACE  &kp LS(LT)  &trans  &trans  &kp LS(LT)  &kp LS(GT)  &kp EQUAL  &kp LS(STAR)   &kp N1        &kp N2         &kp N3        &kp FSLH       &kp LS(G)
&kp LS(LG(Z))  &kp LSHFT  &kp LS(DOWN)  &kp LS(LG(RIGHT))  &kp DEL             &trans      &trans  &trans  &kp COMMA   &kp DOT     &kp N0                    &kp LS(LPAR)  &kp LS(RPAR)   &kp LS(LBRC)  &kp LS(RBRC)   &trans
            >;
        };

        Navigation {
            bindings = <
&trans    &trans     &trans     &trans     &trans                                                                                     &trans     &trans               &trans             &trans     &trans
&trans    &trans     &trans     &trans     &trans           &trans                                                     &trans         &trans     &trans               &trans             &trans     &trans
&trans    &kp LCTRL  &kp LCTRL  &kp LCTRL  &kp LALT         &kp LG(F)                                                  &kp LS(LG(G))  &kp BSPC   &kp LG(K_SCROLL_UP)  &kp K_SCROLL_DOWN  &kp LEFT   &kp LG(K)
&trans    &kp LCTRL  &kp LCTRL  &kp LALT   &kp PRINTSCREEN  &trans                                                     &trans         &kp LEFT   &kp DOWN             &kp UP             &kp RIGHT  &kp LG(L)
&trans    &trans     &trans     &trans     &trans           &trans     &trans  &trans  &trans  &trans  &trans  &trans  &trans         &kp HOME   &kp PG_UP            &kp PG_DN          &kp END    &kp LG(J)
&kp LALT  &trans     &trans     &trans     &trans                      &trans  &trans  &trans  &trans  &trans  &trans                 &kp LG(F)  &kp LS(LG(G))        &kp LG(G)          &kp LG(H)  &kp LG(DOT)
            >;
        };

        lower_layer {
            bindings = <
&kp C_BRI_DN  &kp C_BRI_UP  &kp C_PREV  &kp C_NEXT  &kp C_PP                                                                         &kp C_MUTE  &kp C_VOL_DN  &kp C_VOL_UP   &none            &kp PAUSE_BREAK
&trans        &none         &none       &none       &none      &kp HOME                                                   &kp LPAR   &kp KP_NUM  &kp KP_EQUAL  &kp KP_DIVIDE  &kp KP_MULTIPLY  &kp PSCRN
&trans        &none         &none       &kp UP      &none      &kp END                                                    &kp RPAR   &kp KP_N7   &kp KP_N8     &kp KP_N9      &kp KP_MINUS     &kp SLCK
&trans        &none         &kp LEFT    &kp DOWN    &kp RIGHT  &kp PG_UP                                                  &kp PRCNT  &kp KP_N4   &kp KP_N5     &kp KP_N6      &kp KP_PLUS      &none
&trans        &kp K_CMENU   &none       &kp F11     &kp F12    &kp PG_DN  &trans  &trans  &trans  &trans  &trans  &trans  &kp COMMA  &kp KP_N1   &kp KP_N2     &kp KP_N3      &kp KP_ENTER     &trans
&trans        &kp CAPS      &kp INS     &kp F11     &kp F12               &trans  &trans  &trans  &trans  &trans  &trans             &kp KP_N0   &kp KP_N0     &kp KP_DOT     &kp KP_ENTER     &trans
            >;
        };

        Symbols {
            bindings = <
&trans  &trans         &trans        &trans         &trans                                                                               &trans    &trans       &trans     &trans     &trans
&trans  &trans         &trans        &trans         &trans        &trans                                                         &trans  &trans    &trans       &trans     &trans     &trans
&trans  &kp LS(LBRC)   &kp SQT       &kp LS(DQT)    &kp LS(RBRC)  &kp LS(QMARK)                                                  &kp J   &kp LGUI  &kp LGUI     &kp LALT   &kp LCTRL  &trans
&trans  &kp LS(CARET)  &kp EQUAL     &kp LS(UNDER)  &kp LS(DLLR)  &kp LS(STAR)                                                   &kp M   &kp BSPC  &kp TAB      &kp SPACE  &kp RET    &trans
&trans  &kp LS(LT)     &kp LS(PIPE)  &kp MINUS      &kp LS(GT)    &kp FSLH       &trans  &trans  &trans  &trans  &trans  &trans  &kp K   &kp DEL   &kp LS(TAB)  &trans     &trans     &trans
&trans  &kp LS(AMPS)   &kp LBKT      &kp RBKT       &kp LS(PLUS)                 &trans  &trans  &trans  &trans  &trans  &trans          &trans    &trans       &trans     &trans     &trans
            >;
        };

        magic_layer {
            bindings = <
&bt BT_CLR   &none            &none            &none            &none                                                                                     &none  &none  &none  &none  &bt BT_CLR_ALL
&none        &none            &none            &none            &none            &none                                                             &none  &none  &none  &none  &none  &none
&none        &rgb_ug RGB_SPI  &rgb_ug RGB_SAI  &rgb_ug RGB_HUI  &rgb_ug RGB_BRI  &rgb_ug RGB_TOG                                                   &none  &none  &none  &none  &none  &none
&bootloader  &rgb_ug RGB_SPD  &rgb_ug RGB_SAD  &rgb_ug RGB_HUD  &rgb_ug RGB_BRD  &rgb_ug RGB_EFF                                                   &none  &none  &none  &none  &none  &bootloader
&sys_reset   &none            &none            &none            &none            &none            &bt_2  &bt_3  &none         &none  &none  &none  &none  &none  &none  &none  &none  &sys_reset
&none        &none            &none            &none            &none                             &bt_0  &bt_1  &out OUT_USB  &none  &none  &none         &none  &none  &none  &none  &to 7
            >;
        };

        factory_test_layer {
            bindings = <
&kp N0  &kp N6  &kp N2  &kp N8  &kp N4                                                                  &kp N4  &kp N8  &kp N2  &kp N6  &kp N0
&kp N1  &kp N7  &kp N3  &kp N9  &kp N5  &kp N0                                                  &kp N0  &kp N5  &kp N9  &kp N3  &kp N7  &kp N1
&kp N2  &kp N8  &kp N4  &kp N0  &kp N6  &kp N1                                                  &kp N1  &kp N6  &kp N0  &kp N4  &kp N8  &kp N2
&kp N3  &kp N9  &kp N5  &kp N1  &kp N7  &kp N2                                                  &kp N2  &kp N7  &kp N1  &kp N5  &kp N9  &kp N3
&kp N4  &kp N0  &kp N6  &kp N2  &kp N8  &kp N3  &kp N4  &kp N5  &kp N6  &kp N6  &kp N5  &kp N4  &kp N3  &kp N8  &kp N2  &kp N6  &kp N0  &kp N4
&kp N5  &kp N1  &kp N7  &kp N3  &kp N9          &kp N7  &kp N8  &kp N9  &kp N9  &kp N8  &kp N7          &kp N9  &kp N3  &kp N7  &kp N1  &kp N5
            >;
        };
    };
};
